{"name":"Aspidites","tagline":"IPython Turtle Functionality. ","body":"# Welcome to the official Aspidites IPython Turtle implementation homepage!\r\n\r\nFor the last 3 months we have been working on integrating a turtle, similar to the popular python educational tool, into the IPython development environment. \r\n\r\nThe code is available from the links above for you to check out. \r\nFrom within the aspidites directory run \r\n\r\npython -m IPython notebook\r\n\r\nTo use the turtle click on the turtle icon in the top left corner of your notebook or enter the following command.\r\n \r\nfrom NewTurtle import Turtle<br>t = Turtle()<br>t.forward(100)\r\n\r\nSo far you can use the following turtle commands.\r\n\r\n<br>backward()<br>forward()<br>right()<br>left()<br>circle()<br>penup()<br>pendown()<br>speed()<br>pencolor()\r\n\r\nIf you want to add to, or modify this project here are a few things that will be useful to keep in mind. \r\n\r\n1. The changes are primarily located in \"IPython/html/static/notebook/js/outputarea.js\", \"/IPython/extensions/NewTurtle.py\", \"IPython/html/static/notebook/js/myScript.js\".\r\n\r\n2. We have created a mime type called \"turtle-text\" and a function that receives it called \"append_turtle\" in outputarea.js.\r\n\r\n3. The Turtle commands are sent as a string of characters that are exported when the \"run cell\" button is pressed. You can get the details in the NewTurtle.py module.\r\n\r\n4. The commands are parsed and drawn using the paper.js library from within the myScript.js file.\r\n\r\nHere's a link to a video tutorial on YouTube:\r\n\r\n\r\n\r\n","google":"IPython Turtle Aspidites","note":"Don't delete this file! It's used internally to help with page regeneration."}